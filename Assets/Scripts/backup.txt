JUST SOME OLD CODE

using System;
using System.Collections;
using System.Collections.Generic;
using Mono.Cecil;
using Mono.Cecil.Cil;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.UIElements;

public class Actor_Player : Actor
{
    //Debug Cheats
    private bool MeatBoyWallCheat=false;

    public GameObject trail_root;
    private float TrailTimer;
    public float JumpPower = 4.5f;
    private bool doubleJump;
    public GameObject Stock_Sprite;
    public GameObject Brute_Sprite;
    public float acceleration;
    public float deceleration;
    private bool IsStock=false;
    
    private bool[] WallJumpEnabled = new bool[3]{true,false,false};
    private int LastWallTouched=0;
    private float WallJumpForce =0;
    float accelerationTime;
    public GameObject StockHealthBar;
    public GameObject BruteHealthBar;

     public GameObject PunchBox;
     private float PunchBoxTimer;

    public ActorVitals StockHealth;
    public ActorVitals BruteHealth;

    private float DashTimer;
    private Vector2 DashDirection;

    private bool HasDashed;

    
new public void Start()
{
base.Start();
 StockHealth = new ActorVitals(200);
 BruteHealth = new ActorVitals(500);
 Health = BruteHealth;
 StockHealth.RemoveOnDeath=false;
 BruteHealth.RemoveOnDeath=false;
}

public void UpdateTrail(){
    TrailTimer-=Time.deltaTime;
    if(TrailTimer < 0){
       GameObject trail = Instantiate(trail_root,IsStock?Stock_Sprite.GetComponent<SpriteRenderer>().transform.position:Brute_Sprite.GetComponent<SpriteRenderer>().transform.position,transform.rotation);
        trail.GetComponent<SpriteRenderer>().sprite = IsStock?Stock_Sprite.GetComponent<SpriteRenderer>().sprite:Brute_Sprite.GetComponent<SpriteRenderer>().sprite;
        trail.GetComponent<SpriteRenderer>().flipX = IsStock?Stock_Sprite.GetComponent<SpriteRenderer>().flipX:Brute_Sprite.GetComponent<SpriteRenderer>().flipX;
        TrailTimer=0.09f;
    }
}

public Animator GetAnimator(){return (IsStock?Stock_Sprite:Brute_Sprite).GetComponent<Animator>();}

// Update is called once per frame
void Update()
    {
        //Change character sprite
         if (Input.GetKeyDown("q")&&PunchBoxTimer<=0&&DashTimer<=0)
        {
            if (!IsStock)
            {

                // Changes sprite to stock
                Stock_Sprite.SetActive(true); 
                Brute_Sprite.SetActive(false);
                WalkSpeed=6f;
                JumpPower = 7.0f;
                Health = StockHealth;
                IsStock = true;

                Vector3 oldPosition = StockHealthBar.transform.position;

                StockHealthBar.transform.position = BruteHealthBar.transform.position;
                StockHealthBar.transform.localScale = StockHealthBar.transform.localScale * 2;
                BruteHealthBar.transform.localScale = BruteHealthBar.transform.localScale / 2;
                BruteHealthBar.transform.position = oldPosition;



            }
            else
            {

                // Changes sprite to brute
                Stock_Sprite.SetActive(false);
                Brute_Sprite.SetActive(true);
                JumpPower = 4.5f;
                WalkSpeed=5f;
                Health = BruteHealth;
                IsStock = false;

                Vector3 oldPosition = BruteHealthBar.transform.position;

                BruteHealthBar.transform.position = StockHealthBar.transform.position;
                BruteHealthBar.transform.localScale = BruteHealthBar.transform.localScale * 2;
                StockHealthBar.transform.localScale = StockHealthBar.transform.localScale / 2;
                StockHealthBar.transform.position = oldPosition;

               
            }
        }
        //Fight or Flight
        if (Input.GetKey("f"))
        {
            if(IsStock && !isGrounded && !HasDashed && DashTimer<=0)
            {
            DashDirection = new Vector2(Input.GetKey("a")?-1f:Input.GetKey("d")?1f:0,Input.GetKey("s")?-1f:Input.GetKey("w")?1f:0);
            Stock_Sprite.GetComponent<SpriteRenderer>().flipX = Input.GetKey("a");
            //Stock_Sprite.GetComponent<SpriteRenderer>().flipY = Input.GetKey("s");
            if (DashDirection.magnitude==0) DashDirection = Vector2.left*(Stock_Sprite.GetComponent<SpriteRenderer>().flipX?1:-1);

            DashTimer = 0.5f;
            HasDashed = true;
            }else if(!IsStock && PunchBoxTimer<=0)
            {
                if(isGrounded){
                GetAnimator().SetBool("Attacking",true);
                PunchBoxTimer=0.8f;
                PunchBox.transform.localPosition = new Vector3(1.026f*(Brute_Sprite.GetComponent<SpriteRenderer>().flipX?-1:1),0.202f,0);
                }else{
                    DashTimer = 1f;
                    PunchBoxTimer=1f;
                    DashDirection = Vector2.down;
                    //Brute_Sprite.GetComponent<SpriteRenderer>().flipY = true;
                    PunchBox.transform.localPosition = new Vector3(0,-1f,0);
                }

            }

        }
        if(PunchBoxTimer>0){PunchBoxTimer-=Time.deltaTime;
         rb.velocity =new Vector2(0,rb.velocity.y);
        PunchBox.SetActive(PunchBoxTimer>0&&PunchBoxTimer<0.4);
        Brute_Sprite.GetComponent<SpriteRenderer>().color = (PunchBoxTimer>0&&PunchBoxTimer<0.4)?Color.red:Color.white;
        //Silly
        //transform.localScale = Vector2.one+new Vector2(Mathf.Abs(DashDirection.x),Mathf.Abs(DashDirection.y))*DashTimer*2;
        if(DashTimer>0)
        {
            UpdateTrail();
            DashTimer-=Time.deltaTime;
            rb.velocity = DashDirection*acceleration*math.clamp(DashTimer*4,0f,1f)*1.5f;
            
            rb.gravityScale=0;
            PunchBox.SetActive(PunchBoxTimer>0);
            Brute_Sprite.GetComponent<SpriteRenderer>().color = (PunchBoxTimer>0)?Color.red:Color.white;
        }
        }
        else if(DashTimer>0)
        {

            UpdateTrail();
            DashTimer-=Time.deltaTime;
            rb.velocity = DashDirection*acceleration*math.clamp(DashTimer*4,0f,1f)*1.5f;
            
            rb.gravityScale=0;
            
        }else{
            GetAnimator().SetBool("Attacking",false);
            rb.gravityScale=1;
            Stock_Sprite.GetComponent<SpriteRenderer>().flipY =false;
            Brute_Sprite.GetComponent<SpriteRenderer>().flipY =false;
         PunchBox.SetActive(PunchBoxTimer>0);
            Brute_Sprite.GetComponent<SpriteRenderer>().color = (PunchBoxTimer>0)?Color.red:Color.white;
        if (Input.GetKey("d"))
        {
            accelerationTime+= Time.deltaTime*acceleration/3f;
            Velocity.x += acceleration * Time.deltaTime+accelerationTime/5;
            Stock_Sprite.GetComponent<SpriteRenderer>().flipX = false;
            Brute_Sprite.GetComponent<SpriteRenderer>().flipX = false;
        }
        if (Input.GetKey("a"))
        {
            accelerationTime+= Time.deltaTime*acceleration/3f;
            Velocity.x -= acceleration * Time.deltaTime+accelerationTime/5;
            Stock_Sprite.GetComponent<SpriteRenderer>().flipX = true;
            Brute_Sprite.GetComponent<SpriteRenderer>().flipX = true;
        }
        if (!(Input.GetKey("a")||Input.GetKey("d"))||(Input.GetKey("a")&&Input.GetKey("d"))) 
        {
            accelerationTime-= Time.deltaTime*deceleration;
            Velocity.x -= deceleration * Mathf.Sign(Velocity.x) * Time.deltaTime;
        }
        GetAnimator().SetInteger("Air State",isGrounded?rb.velocity.y<0?2:0:DashTimer>0?3:rb.velocity.y<0?2:1);
        GetAnimator().SetBool("Moving", accelerationTime>0);
        accelerationTime = Mathf.Clamp(accelerationTime, 0f,1f);
        Velocity.x = Mathf.Clamp(Velocity.x, -1f, 1f);

        if(Mathf.Abs(WallJumpForce)>0.0025){
            WallJumpForce-=MathF.Sign(WallJumpForce)*Time.deltaTime*4;
            WallJumpForce*=0.93f;
        }else
        {
            WallJumpForce=0;
        }

        rb.velocity = new Vector2(Velocity.x * WalkSpeed*accelerationTime+WallJumpForce, rb.velocity.y);
        }
        //Jump and double jump mechanic
        if (Input.GetKeyDown("space"))
        {
             RaycastHit2D hitLeft = Physics2D.Raycast(IsStock?Stock_Sprite.transform.position:Brute_Sprite.transform.position, Vector2.left,0.7f);
                RaycastHit2D hitRight = Physics2D.Raycast(IsStock?Stock_Sprite.transform.position:Brute_Sprite.transform.position, Vector2.right,0.7f);
                if (hitLeft) WallJumpEnabled[1]=true;
                else if (hitRight) WallJumpEnabled[2]=true;
                else{
                WallJumpEnabled[0]=false;
                }


            if (isGrounded||(IsStock && doubleJump)||WallJumpEnabled[0]) // Checks if player is grounded then if doubleJump is true
            {
                
                if(WallJumpEnabled[0])
                {
                    if(WallJumpEnabled[1]||WallJumpEnabled[2])
                    {
                        Debug.Log("WallJump Triggered!");
                    LastWallTouched = WallJumpEnabled[1]?1:2;
                    WallJumpEnabled[1]=LastWallTouched!=1;
                    WallJumpEnabled[2]=LastWallTouched!=2;
                    WallJumpForce=JumpPower*(LastWallTouched==1?1:-1);
                    rb.velocity = new Vector2(rb.velocity.x,JumpPower);
                    }
                    else
                    {
                        WallJumpEnabled[0]=false;
                        return;
                        }

                }else{
                    rb.velocity = new Vector2(rb.velocity.x,JumpPower);
                    doubleJump = !doubleJump;
                }
                isGrounded = false;
                
            }
            
        }
        if (Input.GetKeyUp("space") && rb.velocity.y > 0f) // If space is let go mid-jump, upwards velocity halved for smaller jump
        {
            rb.velocity = new Vector2(rb.velocity.x, rb.velocity.y * 0.5f);
        }
    }

    new public void OnCollisionEnter2D(Collision2D collision)
    {
        //base.OnCollisionEnter2D(collision);
        if (collision.gameObject.CompareTag("Ground")){
                  
            if(MeatBoyWallCheat)
            {
            doubleJump = false;
            DashTimer = 0;
            PunchBoxTimer=0;
            HasDashed=false;
            isGrounded = true;
               return; 
            }

            RaycastHit2D hit = Physics2D.Raycast(IsStock?Stock_Sprite.transform.position:Brute_Sprite.transform.position, Vector2.down,1.1f);
            if (hit)
            {
            doubleJump = false;
            DashTimer = 0;
            PunchBoxTimer=0;
            HasDashed=false;
            float distance = Mathf.Abs(hit.point.y - transform.position.y);
            Debug.Log(distance);
            isGrounded = true;
            WallJumpEnabled[1]=false;
            WallJumpEnabled[2]=false;
            LastWallTouched=0;
            }
              RaycastHit2D hitLeft = Physics2D.Raycast(Stock_Sprite.transform.position, Vector2.left,0.7f);
                    RaycastHit2D hitRight = Physics2D.Raycast(Stock_Sprite.transform.position, Vector2.right,0.7f);
                        WallJumpEnabled[0]= !isGrounded&&((hitLeft&&LastWallTouched!=1)||(hitRight&&LastWallTouched!=2))&&!isGrounded&&IsStock;
            
        }
        
    }
}